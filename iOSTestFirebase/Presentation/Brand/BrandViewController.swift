//
//  BrandViewController.swift
//  iOSTestFirebase
//
//  Created by Makrem chambah on 11/12/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher
import Foundation


protocol BrandDisplayLogic: class
{
    func displaySomething(viewModel: Brand.Something.ViewModel)
    func loadData(response:[NSDictionary])
}

class BrandViewController: UIViewController, BrandDisplayLogic
{
    
    //MARK:- Outlets controller:
    @IBOutlet weak var premiumView          : UIView!
    @IBOutlet weak var segController        : UISegmentedControl!
    @IBOutlet weak var collectionView       : UICollectionView!
    @IBOutlet weak var toutesLesMarquesView : UIView!
    @IBOutlet weak var premiumCollectionView: UICollectionView!
    
    
    
    
    //MARK:- var declarations
    var interactor        : BrandBusinessLogic?
    var router            : (NSObjectProtocol & BrandRoutingLogic & BrandDataPassing)?
    var items             : [NSDictionary] = []
    var premiumItems      : [NSDictionary] = []
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController        = self
        let interactor            = BrandInteractor()
        let presenter             = BrandPresenter()
        let router                = BrandRouter()
        viewController.interactor = interactor
        viewController.router     = router
        interactor.presenter      = presenter
        presenter.viewController  = viewController
        router.viewController     = viewController
        router.dataStore          = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        self.interactor?.loadBrands()
        
    }
    
    
    
    // MARK: Do something
    
    @IBAction func showHideViews(_ sender: Any){
        if self.segController.selectedSegmentIndex == 0{
            print("first 3asba !")
            UIView.transition(with: self.segController, duration: 1,
                              options: .preferredFramesPerSecond30,
                              animations: {
                                self.toutesLesMarquesView.alpha = 1
                                self.toutesLesMarquesView.frame   = CGRect(x: 0,y: 187,width: self.toutesLesMarquesView.frame.width, height: self.toutesLesMarquesView.frame.height)
                                                                self.premiumView.alpha  = 0
                              })
            UIView.animate(withDuration: 1){
                self.toutesLesMarquesView.frame = CGRect(x: 0,y: 187,width: self.toutesLesMarquesView.frame.width, height: self.toutesLesMarquesView.frame.height)
                self.toutesLesMarquesView.alpha  = 1
                                self.premiumView.alpha = 0
            }
        }else if self.segController.selectedSegmentIndex == 1{
            UIView.transition(with: self.segController, duration: 1,
                              options: .preferredFramesPerSecond30,
                              animations: {
                                self.toutesLesMarquesView.alpha = 1
                                self.toutesLesMarquesView.frame   = CGRect(x: 1200,y: 187,width: self.toutesLesMarquesView.frame.width, height: self.toutesLesMarquesView.frame.height)
                                                                self.premiumView.alpha  = 0
                              })
            UIView.animate(withDuration: 1){
                self.toutesLesMarquesView.frame = CGRect(x: 1200,y: 187,width: self.toutesLesMarquesView.frame.width, height: self.toutesLesMarquesView.frame.height)
                self.toutesLesMarquesView.alpha  = 1
                                self.premiumView.alpha = 1
            }
            print("Second 3asba !")
        }
    }
    
    func doSomething()
    {
        let request = Brand.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Brand.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    //    MARK: - Get data from API
    func loadData(response:[NSDictionary]){
        print(response)
        for resp in response {
            if ((resp["premium"])!) as! Int == 1{
                premiumItems.append(resp)
            }
        }
        self.items = response
        print(self.items,self.items.count)
        self.collectionView.reloadData()
        self.premiumCollectionView.reloadData()
    }
    
    
    
}


extension BrandViewController : UICollectionViewDelegate, UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        if collectionView == self.premiumCollectionView{
            return self.premiumItems.count
        }else{
            return self.items.count
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == self.collectionView{
        guard let  cell = collectionView.dequeueReusableCell(withReuseIdentifier: "brandCell", for: indexPath) as?
                CustomCollectionViewCell
        else {
            return UICollectionViewCell()
        }
        
        
            if (self.items[indexPath.row]["pic"])! as? String != nil {
            let url = URL(string: (self.items[indexPath.row]["pic"])! as! String)
            cell.imageViewBrand.kf.setImage(with: url!,
                                            options: [.onlyLoadFirstFrame], completionHandler: {
                                                result in
                                                switch result {
                                                case .success:
                                                    print(result)
                                                    break
                                                case .failure:
                                                    cell.imageViewBrand.image = UIImage(named: "noImg")!
                                                }
                                            })
        }
        return cell
        } else{
            guard let  premiumCell = premiumCollectionView.dequeueReusableCell(withReuseIdentifier: "brandPremiumCell", for: indexPath) as?
                    CustomCollectionPremiumCell
            else {
                return UICollectionViewCell()
            }
            
            if (self.premiumItems[indexPath.row]["pic"])! as? String != nil {
                let url = URL(string: (self.premiumItems[indexPath.row]["pic"])! as! String)
                premiumCell.PremiumBrandImage.kf.setImage(with: url!,
                                                options: [.onlyLoadFirstFrame], completionHandler: {
                                                    result in
                                                    switch result {
                                                    case .success:
                                                        print(result)
                                                        break
                                                    case .failure:
                                                        premiumCell.PremiumBrandImage.image = UIImage(named: "noImg")!
                                                    }
                                                })
            }
            return premiumCell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == premiumCollectionView{
            let storyboard = UIStoryboard(name: "Main", bundle: nil)
            let vc = storyboard.instantiateViewController(identifier: "brandDetails") as! BrandDetailsViewController
            vc.content = self.premiumItems[indexPath.row]
            DispatchQueue.main.async {
                self.navigationController?.pushViewController(vc,animated: false)
            }
        }else{
            let storyboard = UIStoryboard(name: "Main", bundle: nil)
            let vc = storyboard.instantiateViewController(identifier: "brandDetails") as! BrandDetailsViewController
            vc.content = self.items[indexPath.row]
            DispatchQueue.main.async {
                self.navigationController?.pushViewController(vc,animated: false)
            }
        }
       
    }
    
    
    
    
}
