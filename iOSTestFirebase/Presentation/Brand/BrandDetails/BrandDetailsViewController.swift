//
//  BrandDetailsViewController.swift
//  iOSTestFirebase
//
//  Created by Makrem chambah on 11/12/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher
import Foundation

protocol BrandDetailsDisplayLogic: class
{
    func displaySomething(viewModel: BrandDetails.Something.ViewModel)
    func displayData(response:[NSDictionary])
}

class BrandDetailsViewController: UIViewController, BrandDetailsDisplayLogic
{
    //    MARK:- Outlets declarations     :
    @IBOutlet weak var brandImageView     : UIImageView!
    @IBOutlet weak var descriptionLabel   : UILabel!
    @IBOutlet weak var firstView          : UIView!
    @IBOutlet weak var secondView         : UIView!
    @IBOutlet weak var ChiffredAffaires   : UILabel!
    @IBOutlet weak var commissionLabel    : UILabel!
    
    
    //    MARK:- var declarations:
    var interactor      : BrandDetailsBusinessLogic?
    var router          : (NSObjectProtocol & BrandDetailsRoutingLogic & BrandDetailsDataPassing)?
    var content         : NSDictionary = [:]
    var purchases       : [NSDictionary] = []
    var idOffer         : String = ""
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor            = BrandDetailsInteractor()
        let presenter             = BrandDetailsPresenter()
        let router                = BrandDetailsRouter()
        viewController.interactor = interactor
        viewController.router     = router
        interactor.presenter      = presenter
        presenter.viewController  = viewController
        router.viewController     = viewController
        router.dataStore          = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        self.title =  ((content["name"])! as! String)
        displayElements()
        designForImageBrand()
        
        
        if let inthtest = content["offerId"] as? Int{
            self.idOffer  = String(inthtest)
        }
        else if let inthtest = content["offerId"] as? String{
            if Int(inthtest) != nil{
                self.idOffer  = inthtest
                
            }
        }
        print(idOffer)
        self.interactor?.loadPurchases(id : idOffer)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = BrandDetails.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: BrandDetails.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    var commission : String = ""
    func displayElements(){
        self.descriptionLabel.text = (self.content["description"] as! String)
        let url = URL(string: (self.content["pic"])! as! String)
        self.brandImageView.kf.setImage(with: url!,
                                        options: [.onlyLoadFirstFrame], completionHandler: {
                                            result in
                                            switch result {
                                            case .success:
                                                print(result)
                                                break
                                            case .failure:
                                                self.brandImageView.image = UIImage(named: "noImg")!
                                            }
                                        })
    }
    
    func designForImageBrand(){
        self.brandImageView.layer.cornerRadius        = 10
        self.brandImageView.layer.shadowColor         = UIColor.systemGray5.cgColor
        self.brandImageView.layer.shadowOffset        = .zero
        self.brandImageView.layer.shadowRadius        = 10
        self.brandImageView.layer.shadowPath          = UIBezierPath(rect: self.brandImageView.bounds).cgPath
        self.brandImageView.backgroundColor           = UIColor.white
        self.brandImageView.layer.shadowOpacity       = 1
        self.brandImageView.layer.shouldRasterize     = true
        self.brandImageView.layer.rasterizationScale  = UIScreen.main.scale
        
        self.firstView.layer.cornerRadius        = 10
        self.firstView.layer.shadowColor         = UIColor.systemGray5.cgColor
        self.firstView.layer.shadowOffset        = .zero
        self.firstView.layer.shadowRadius        = 10
        self.firstView.layer.shadowPath          = UIBezierPath(rect: self.firstView.bounds).cgPath
        self.firstView.backgroundColor           = UIColor.white
        self.firstView.layer.shadowOpacity       = 1
        self.firstView.layer.shouldRasterize     = true
        self.firstView.layer.rasterizationScale  = UIScreen.main.scale
        
        self.secondView.layer.cornerRadius        = 10
        self.secondView.layer.shadowColor         = UIColor.systemGray5.cgColor
        self.secondView.layer.shadowOffset        = .zero
        self.secondView.layer.shadowRadius        = 10
        self.secondView.layer.shadowPath          = UIBezierPath(rect: self.secondView.bounds).cgPath
        self.secondView.backgroundColor           = UIColor.white
        self.secondView.layer.shadowOpacity       = 1
        self.secondView.layer.shouldRasterize     = true
        self.secondView.layer.rasterizationScale  = UIScreen.main.scale
        
        
        
    }
    
    var chiffreAffiare : NSNumber = 0
    var commissions : NSNumber = 0
    
    func displayData(response:[NSDictionary]){
        self.purchases = response
//        print(response[0])
//        print(content)
        
        for resp in response{
            let c  = content["offerId"]! as? Int
            let r  = resp["offerId"]! as? Int
            let cS = content["offerId"]! as? String
            let rS = resp["offerId"]! as? String
            var CA =  resp["amount"]! as? String
            if c == r {
                CA = (resp["amount"]!) as? String
                print(resp)
                print(resp["amount"]!," - ",chiffreAffiare," - ",resp["commission"]!)
                commissionLabel.text = ((resp["commission"]!) as? String)! + " £"
                ChiffredAffaires.text = ((CA ?? "108.33") as String) + " £"
//                self.commissions = (resp["commission"]!) as! NSNumber
//                self.chiffreAffiare = String((resp["amount"]! as? Int)!)
//                self.commission = String((resp["commission"]! as? Int)!)
            }
            else if  cS == rS{
                if cS != nil && rS != nil && CA != nil{
                    print("Error !")
                }
            }
        }
//        ChiffredAffaires.text = (chiffreAffiare as? Float) as? String
//        commissionLabel.text =  (commissions as? Float) as? String
//        
//        if let inthtest = chiffreAffiare as? Float{
//            ChiffredAffaires.text = String(inthtest)
//        }
//        else if let inthtest = chiffreAffiare as? String {
//            if Float(inthtest) != nil{
//                ChiffredAffaires.text = inthtest
//                
//            }
//        }
    }
}
