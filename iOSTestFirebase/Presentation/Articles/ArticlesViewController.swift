//
//  ArticlesViewController.swift
//  testiOSFireBase
//
//  Created by Makrem chambah on 10/12/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation
import Kingfisher

protocol ArticlesDisplayLogic: class
{
    func displaySomething(viewModel: Articles.Something.ViewModel)
    func displayData(response:[NSDictionary])
    func displayDataFailure(response: [NSDictionary])
}

class ArticlesViewController: UIViewController, ArticlesDisplayLogic
{
    
    //    MARK:- Outlets declarations
    
    @IBOutlet weak var tableView: UITableView!
    
    
    //    MARK:- variables Declarations:
    var interactor        : ArticlesBusinessLogic?
    var router            : (NSObjectProtocol & ArticlesRoutingLogic & ArticlesDataPassing)?
    var items             : [NSDictionary] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController        = self
        let interactor            = ArticlesInteractor()
        let presenter             = ArticlesPresenter()
        let router                = ArticlesRouter()
        viewController.interactor = interactor
        viewController.router     = router
        interactor.presenter      = presenter
        presenter.viewController  = viewController
        router.viewController     = viewController
        router.dataStore          = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        self.interactor?.loadArticles()
        tableView.dataSource = self
        tableView.delegate   = self
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Articles.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Articles.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func displayData(response:[NSDictionary]){
        print("hi")
        print(response)
        self.items = response
        print((self.items[1]["uid"])!)
        print((self.items[1]["image"])!)
        print("------------------")
        self.tableView.reloadData()
    }
    
    func displayDataFailure(response: [NSDictionary]){
        print(response)
    }
}


extension ArticlesViewController: UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        self.items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "articleCell", for: indexPath) as? CustomCell
        else {
            return UITableViewCell()
        }
        let likes  = ((self.items[indexPath.row]["likesNbr"])!)
        print(likes)
        cell.UIDLabel.text = ((self.items[indexPath.row]["uid"])! as! String)
        //cell.likesNbr.text = ((self.items[indexPath.row]["likesNbr"])! as! String)
        //cell.offerIDLabel.text = ((self.items[indexPath.row]["offerId"])! as! String)
        let url = URL(string:(self.items[indexPath.row]["image"])! as! String)
        
        cell.imageArticle.kf.setImage(with: url!,
                                      options: [.onlyLoadFirstFrame], completionHandler: {
                                        result in
                                        switch result {
                                        case .success:
                                            print(result)
                                            break
                                        case .failure:
                                            cell.imageArticle.image = UIImage(named: "noImg")!
                                        }
                                      })
        return cell
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
//        print("zabour")
        let position = scrollView.contentOffset.y
//        print(position,"----------",(self.tableView.contentSize.height  - scrollView.frame.size.height))
        if position > (self.tableView.contentSize.height  - 213000 - scrollView.frame.size.height) {
            //print("3assbet scroll ")
        }
    }
    
    
}
